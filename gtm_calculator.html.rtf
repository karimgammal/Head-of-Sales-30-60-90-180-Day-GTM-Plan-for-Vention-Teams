{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 <!DOCTYPE html>\
<html lang="en">\
<head>\
    <meta charset="UTF-8">\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\
    <title>GTM Revenue Calculator - Vention Teams</title>\
    <script src="https://cdn.tailwindcss.com"></script>\
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>\
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>\
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>\
</head>\
<body>\
    <div id="root"></div>\
    \
    <script type="text/babel">\
        const \{ useMemo, useState \} = React;\
\
        function clamp(n, lo, hi) \{ return Math.max(lo, Math.min(hi, n)); \}\
        function fmtMoney(n) \{ n = Number(n) || 0; return n.toLocaleString(undefined, \{ style: "currency", currency: "USD", maximumFractionDigits: 0 \}); \}\
        function fmtInt(n) \{ return Math.round(Number(n) || 0).toLocaleString(); \}\
\
        function Section(\{ title, children \}) \{\
          return (\
            <div className="rounded-2xl border border-gray-200 p-4 md:p-6 shadow-sm bg-white">\
              <h2 className="text-lg md:text-xl font-semibold mb-3">\{title\}</h2>\
              \{children\}\
            </div>\
          );\
        \}\
\
        function GTMCalculator() \{\
          const [mode, setMode] = useState("headcount");\
          const [horizon, setHorizon] = useState(24);\
          const [quotaPerAEAnnual, setQuotaPerAEAnnual] = useState(1_000_000);\
          const [attainmentPct, setAttainmentPct] = useState(85);\
          const [avgDealSize, setAvgDealSize] = useState(200_000);\
          const [salesCycleMonths, setSalesCycleMonths] = useState(5);\
          const [capacityDriver, setCapacityDriver] = useState("quota");\
          const [actualAccountsPerAEMonth, setActualAccountsPerAEMonth] = useState(42);\
          const [startingAEs, setStartingAEs] = useState(4);\
          const [inheritedAttainmentPct, setInheritedAttainmentPct] = useState(50);\
          const [hirePlan, setHirePlan] = useState(() => \{ const arr = new Array(24).fill(0); arr[4] = 2; arr[8] = 2; return arr; \});\
          const [newHireRampMonths, setNewHireRampMonths] = useState(1);\
          const [targetRevenue, setTargetRevenue] = useState(8_000_000);\
\
          const monthlyQuotaFull = quotaPerAEAnnual / 12;\
          const attainment = clamp(attainmentPct / 100, 0, 2);\
          const inheritedPct = clamp(inheritedAttainmentPct / 100, 0, 2);\
          const months = useMemo(() => Array.from(\{ length: horizon \}, (_, i) => `M$\{i + 1\}`), [horizon]);\
          const normalizedHirePlan = useMemo(() => \{\
            const arr = new Array(horizon).fill(0);\
            for (let i = 0; i < Math.min(hirePlan.length, horizon); i++) arr[i] = hirePlan[i] || 0;\
            return arr;\
          \}, [hirePlan, horizon]);\
\
          const rampForMonthIndex = (idx) => \{\
            if (newHireRampMonths === 1) return idx === 1 ? 0.5 : 1;\
            if (newHireRampMonths === 2) return idx === 1 ? 0.5 : (idx === 2 ? 0.75 : 1);\
            return idx === 1 ? 0.33 : (idx === 2 ? 0.66 : 1);\
          \};\
\
          function simulate(hiresByMonth, recognitionStyle) \{\
            const monthlyRevenue = new Array(horizon).fill(0);\
            const monthlyRevenueStart = new Array(horizon).fill(0);\
            const monthlyRevenueHires = new Array(horizon).fill(0);\
            const totalAEsByMonth = new Array(horizon).fill(0);\
\
            for (let m = 0; m < horizon; m++) \{\
              totalAEsByMonth[m] = startingAEs + hiresByMonth.slice(0, m + 1).reduce((a, b) => a + b, 0);\
              monthlyRevenueStart[m] = startingAEs * monthlyQuotaFull * inheritedPct;\
            \}\
\
            if (recognitionStyle === "headcount") \{\
              const startOffset = newHireRampMonths + salesCycleMonths;\
              const monthsRecognized = Math.max(1, 12 - startOffset);\
              const perAEPerMonth = (quotaPerAEAnnual * attainment) / monthsRecognized;\
\
              for (let h = 0; h < horizon; h++) \{\
                const hired = hiresByMonth[h] || 0;\
                if (!hired) continue;\
                const startIdx = h + startOffset - 1;\
                const endIdx = Math.min(h + 11, horizon - 1);\
                for (let m = startIdx; m <= endIdx; m++) \{\
                  if (m >= 0 && m < horizon) monthlyRevenueHires[m] += hired * perAEPerMonth;\
                \}\
              \}\
            \} else \{\
              const monthlyCapacityHires = new Array(horizon).fill(0);\
              for (let m = 0; m < horizon; m++) \{\
                let cap = 0;\
                for (let h = 0; h <= m; h++) \{\
                  const hired = hiresByMonth[h] || 0;\
                  if (!hired) continue;\
                  const idx = m - h + 1;\
                  const ramp = rampForMonthIndex(idx);\
                  if (capacityDriver === "quota") \{\
                    cap += hired * monthlyQuotaFull * attainment * ramp;\
                  \} else \{\
                    const conv = 0.01;\
                    const avgDeal = avgDealSize;\
                    const acts = actualAccountsPerAEMonth * ramp;\
                    cap += hired * acts * avgDeal * conv;\
                  \}\
                \}\
                monthlyCapacityHires[m] = cap;\
              \}\
              for (let m = 0; m < horizon; m++) \{\
                const lagIdx = m - salesCycleMonths;\
                monthlyRevenueHires[m] = lagIdx >= 0 ? monthlyCapacityHires[lagIdx] : 0;\
              \}\
            \}\
\
            for (let m = 0; m < horizon; m++) \{\
              monthlyRevenue[m] = monthlyRevenueStart[m] + monthlyRevenueHires[m];\
            \}\
\
            const totals = \{\
              totalRevenue: monthlyRevenue.reduce((a, b) => a + b, 0),\
              totalRevenueStart: monthlyRevenueStart.reduce((a, b) => a + b, 0),\
              totalRevenueHires: monthlyRevenueHires.reduce((a, b) => a + b, 0),\
              finalAECount: totalAEsByMonth[horizon - 1] || startingAEs,\
            \};\
\
            return \{ monthlyRevenue, monthlyRevenueStart, monthlyRevenueHires, totalAEsByMonth, totals \};\
          \}\
\
          const headcountSim = useMemo(\
            () => simulate(normalizedHirePlan, "headcount"),\
            [normalizedHirePlan, horizon, startingAEs, monthlyQuotaFull, inheritedPct, quotaPerAEAnnual, attainment, newHireRampMonths, salesCycleMonths]\
          );\
\
          const revenueDrivenPlan = useMemo(() => \{\
            const maxHires = 2000;\
            let lo = 0, hi = maxHires;\
            let best = \{ hires: 0, sim: simulate(new Array(horizon).fill(0), "generic") \};\
            while (lo <= hi) \{\
              const mid = Math.floor((lo + hi) / 2);\
              const plan = new Array(horizon).fill(0);\
              plan[0] = mid;\
              const sim = simulate(plan, "generic");\
              best = \{ hires: mid, sim \};\
              const total = sim.totals.totalRevenue;\
              if (Math.abs(total - targetRevenue) <= Math.max(1, targetRevenue * 0.01)) break;\
              if (total < targetRevenue) lo = mid + 1;\
              else hi = mid - 1;\
            \}\
            const planSuggestion = new Array(horizon).fill(0);\
            planSuggestion[0] = best.hires;\
            return \{ neededAEs: startingAEs + best.hires, planSuggestion, sim: best.sim \};\
          \}, [targetRevenue, startingAEs, horizon, monthlyQuotaFull, attainment, capacityDriver, actualAccountsPerAEMonth, avgDealSize, newHireRampMonths, salesCycleMonths]);\
\
          return (\
            <div className="w-full mx-auto max-w-7xl p-4 md:p-8 space-y-6 text-gray-900 bg-gray-50 min-h-screen">\
              <header className="flex flex-col md:flex-row md:items-end md:justify-between gap-4 bg-white rounded-2xl p-6 shadow-lg">\
                <div>\
                  <h1 className="text-2xl md:text-3xl font-bold">GTM Revenue & Activity Calculator</h1>\
                  <p className="text-sm md:text-base text-gray-600">Fintech & Healthcare \'95 AE full-cycle \'95 Ramp + sales cycle \'95 Bilateral planning</p>\
                </div>\
                <div className="flex items-center gap-3">\
                  <a href="index.html" className="text-blue-600 hover:text-blue-800 font-medium text-sm">
\f1 \uc0\u8592 
\f0  Back to Plan</a>\
                  <select className="border rounded-xl px-3 py-2" value=\{mode\} onChange=\{(e) => setMode(e.target.value)\}>\
                    <option value="headcount">Headcount-driven</option>\
                    <option value="revenue">Revenue-driven</option>\
                  </select>\
                </div>\
              </header>\
\
              <Section title="Global Inputs">\
                <div className="grid md:grid-cols-3 gap-4">\
                  <div>\
                    <label className="block text-sm font-medium">Horizon (months)</label>\
                    <input type="number" min=\{6\} max=\{36\} value=\{horizon\} onChange=\{(e) => setHorizon(clamp(Number(e.target.value)||0,6,36))\} className="w-full border rounded-xl px-3 py-2" />\
                  </div>\
                  <div>\
                    <label className="block text-sm font-medium">Quota per AE (annual)</label>\
                    <input type="number" value=\{quotaPerAEAnnual\} onChange=\{(e) => setQuotaPerAEAnnual(Number(e.target.value)||0)\} className="w-full border rounded-xl px-3 py-2" />\
                  </div>\
                  <div>\
                    <label className="block text-sm font-medium">Quota Attainment (%)</label>\
                    <input type="number" min=\{0\} max=\{150\} value=\{attainmentPct\} onChange=\{(e) => setAttainmentPct(clamp(Number(e.target.value)||0,0,150))\} className="w-full border rounded-xl px-3 py-2" />\
                  </div>\
                  <div>\
                    <label className="block text-sm font-medium">Avg Deal Size</label>\
                    <input type="number" value=\{avgDealSize\} onChange=\{(e) => setAvgDealSize(Number(e.target.value)||0)\} className="w-full border rounded-xl px-3 py-2" />\
                  </div>\
                  <div>\
                    <label className="block text-sm font-medium">Sales Cycle (months)</label>\
                    <input type="number" min=\{1\} max=\{12\} value=\{salesCycleMonths\} onChange=\{(e) => setSalesCycleMonths(clamp(Number(e.target.value)||0,1,12))\} className="w-full border rounded-xl px-3 py-2" />\
                  </div>\
                  <div>\
                    <label className="block text-sm font-medium">Inherited Team Productivity (%)</label>\
                    <input type="number" min=\{0\} max=\{150\} value=\{inheritedAttainmentPct\} onChange=\{(e) => setInheritedAttainmentPct(clamp(Number(e.target.value)||0,0,150))\} className="w-full border rounded-xl px-3 py-2" />\
                  </div>\
                </div>\
              </Section>\
\
              \{mode === "headcount" && (\
                <>\
                  <Section title="Headcount-Driven Inputs">\
                    <div className="grid md:grid-cols-3 gap-4 mb-4">\
                      <div>\
                        <label className="block text-sm font-medium">Starting AEs (inherited)</label>\
                        <input type="number" min=\{0\} value=\{startingAEs\} onChange=\{(e) => setStartingAEs(Math.max(0, Number(e.target.value)||0))\} className="w-full border rounded-xl px-3 py-2" />\
                      </div>\
                    </div>\
                    <div>\
                      <label className="block text-sm font-medium mb-2">Monthly Hires (editable grid)</label>\
                      <div className="overflow-x-auto">\
                        <table className="min-w-full text-xs">\
                          <thead>\
                            <tr className="text-left border-b">\
                              \{months.map((m) => (<th key=\{m\} className="py-2 px-2 text-center font-medium">\{m\}</th>))\}\
                            </tr>\
                          </thead>\
                          <tbody>\
                            <tr>\
                              \{months.map((m, i) => (\
                                <td key=\{m\} className="py-2 px-2">\
                                  <input type="number" min=\{0\} value=\{normalizedHirePlan[i]\}\
                                    onChange=\{(e)=>\{ const next=[...normalizedHirePlan]; next[i]=Math.max(0, Number(e.target.value)||0); setHirePlan(next); \}\}\
                                    className="w-20 border rounded-lg px-2 py-1 text-right" />\
                                </td>\
                              ))\}\
                            </tr>\
                          </tbody>\
                        </table>\
                      </div>\
                    </div>\
                  </Section>\
\
                  <Section title="Headcount Forecast">\
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-3 mb-4">\
                      <div className="bg-gray-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Final AE Count</div><div className="text-lg font-semibold">\{fmtInt(headcountSim.totals.finalAECount)\}</div></div>\
                      <div className="bg-gray-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Revenue - Inherited</div><div className="text-lg font-semibold">\{fmtMoney(headcountSim.totals.totalRevenueStart)\}</div></div>\
                      <div className="bg-gray-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Revenue - New Hires</div><div className="text-lg font-semibold">\{fmtMoney(headcountSim.totals.totalRevenueHires)\}</div></div>\
                      <div className="bg-blue-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Revenue - Total</div><div className="text-lg font-semibold text-blue-600">\{fmtMoney(headcountSim.totals.totalRevenue)\}</div></div>\
                      <div className="bg-gray-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Start Offset</div><div className="text-lg font-semibold">\{newHireRampMonths + salesCycleMonths\} mo</div></div>\
                    </div>\
\
                    <div className="overflow-x-auto">\
                      <table className="min-w-full text-sm">\
                        <thead>\
                          <tr className="text-left border-b">\
                            <th className="py-2 pr-4">Month</th>\
                            \{months.map((m) => (<th key=\{m\} className="py-2 px-2 text-right">\{m\}</th>))\}\
                          </tr>\
                        </thead>\
                        <tbody>\
                          <tr className="border-b bg-gray-50">\
                            <td className="py-2 pr-4 font-medium">AEs (end of month)</td>\
                            \{headcountSim.totalAEsByMonth.map((v, i) => (<td key=\{i\} className="py-2 px-2 text-right">\{fmtInt(v)\}</td>))\}\
                          </tr>\
                          <tr className="border-b">\
                            <td className="py-2 pr-4 font-medium">Revenue - Inherited</td>\
                            \{headcountSim.monthlyRevenueStart.map((v, i) => (<td key=\{i\} className="py-2 px-2 text-right">\{fmtMoney(v)\}</td>))\}\
                          </tr>\
                          <tr className="border-b">\
                            <td className="py-2 pr-4 font-medium">Revenue - New Hires</td>\
                            \{headcountSim.monthlyRevenueHires.map((v, i) => (<td key=\{i\} className="py-2 px-2 text-right">\{fmtMoney(v)\}</td>))\}\
                          </tr>\
                          <tr className="bg-blue-50">\
                            <td className="py-2 pr-4 font-medium">Revenue - Total</td>\
                            \{headcountSim.monthlyRevenue.map((v, i) => (<td key=\{i\} className="py-2 px-2 text-right font-semibold">\{fmtMoney(v)\}</td>))\}\
                          </tr>\
                        </tbody>\
                      </table>\
                    </div>\
                  </Section>\
                </>\
              )\}\
\
              \{mode === "revenue" && (\
                <>\
                  <Section title="Revenue-Driven Inputs">\
                    <div className="grid md:grid-cols-3 gap-4">\
                      <div>\
                        <label className="block text-sm font-medium">Starting AEs (inherited)</label>\
                        <input type="number" min=\{0\} value=\{startingAEs\} onChange=\{(e)=>setStartingAEs(Math.max(0, Number(e.target.value)||0))\} className="w-full border rounded-xl px-3 py-2" />\
                      </div>\
                      <div>\
                        <label className="block text-sm font-medium">Target Revenue (over horizon)</label>\
                        <input type="number" min=\{0\} value=\{targetRevenue\} onChange=\{(e)=>setTargetRevenue(Math.max(0, Number(e.target.value)||0))\} className="w-full border rounded-xl px-3 py-2" />\
                      </div>\
                      <div>\
                        <label className="block text-sm font-medium">New Hire Ramp Length</label>\
                        <select className="w-full border rounded-xl px-3 py-2" value=\{newHireRampMonths\} onChange=\{(e) => setNewHireRampMonths(Number(e.target.value))\}>\
                          <option value=\{1\}>1 month (50% then 100%)</option>\
                          <option value=\{2\}>2 months (50% 
\f1 \uc0\u8594 
\f0  75% 
\f1 \uc0\u8594 
\f0  100%)</option>\
                          <option value=\{3\}>3 months (33% 
\f1 \uc0\u8594 
\f0  66% 
\f1 \uc0\u8594 
\f0  100%)</option>\
                        </select>\
                      </div>\
                    </div>\
                  </Section>\
\
                  <Section title="Suggested Plan & Forecast">\
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">\
                      <div className="bg-gray-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Estimated AEs Needed</div><div className="text-lg font-semibold">\{fmtInt(revenueDrivenPlan.neededAEs)\}</div></div>\
                      <div className="bg-gray-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Suggested Hires (M1)</div><div className="text-lg font-semibold">\{fmtInt(revenueDrivenPlan.planSuggestion[0])\}</div></div>\
                      <div className="bg-blue-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Forecast Revenue</div><div className="text-lg font-semibold text-blue-600">\{fmtMoney(revenueDrivenPlan.sim.totals.totalRevenue)\}</div></div>\
                      <div className="bg-gray-50 rounded-xl p-3 text-sm"><div className="text-gray-500">Start Offset</div><div className="text-lg font-semibold">\{newHireRampMonths + salesCycleMonths\} mo</div></div>\
                    </div>\
\
                    <div className="overflow-x-auto">\
                      <table className="min-w-full text-sm">\
                        <thead>\
                          <tr className="text-left border-b">\
                            <th className="py-2 pr-4">Month</th>\
                            \{months.map((m) => (<th key=\{m\} className="py-2 px-2 text-right">\{m\}</th>))\}\
                          </tr>\
                        </thead>\
                        <tbody>\
                          <tr className="border-b">\
                            <td className="py-2 pr-4 font-medium">Revenue - Inherited</td>\
                            \{revenueDrivenPlan.sim.monthlyRevenueStart.map((v, i) => (<td key=\{i\} className="py-2 px-2 text-right">\{fmtMoney(v)\}</td>))\}\
                          </tr>\
                          <tr className="border-b">\
                            <td className="py-2 pr-4 font-medium">Revenue - New Hires</td>\
                            \{revenueDrivenPlan.sim.monthlyRevenueHires.map((v, i) => (<td key=\{i\} className="py-2 px-2 text-right">\{fmtMoney(v)\}</td>))\}\
                          </tr>\
                          <tr className="bg-blue-50">\
                            <td className="py-2 pr-4 font-medium">Revenue - Total</td>\
                            \{revenueDrivenPlan.sim.monthlyRevenue.map((v, i) => (<td key=\{i\} className="py-2 px-2 text-right font-semibold">\{fmtMoney(v)\}</td>))\}\
                          </tr>\
                        </tbody>\
                      </table>\
                    </div>\
                  </Section>\
                </>\
              )\}\
\
              <footer className="text-xs text-gray-500 pt-2 text-center">\
                <p>Headcount forecast: recognition starts after Ramp + Sales Cycle; Revenue-driven: ramp + lag planner.</p>\
              </footer>\
            </div>\
          );\
        \}\
\
        ReactDOM.render(<GTMCalculator />, document.getElementById('root'));\
    </script>\
</body>\
</html>}